
#
# Deploy in the "RHOAI on OCP on AWS with NVIDIA GPUs" lab
#
---
apiVersion: user.openshift.io/v1
kind: Group
metadata:
  name: cluster-admins
users:
  - admin
---



---
apiVersion: batch/v1
kind: Job
metadata:
  name: bootstrap-lab
  namespace: openshift-gitops
spec:
  template:
    spec:
      serviceAccountName: openshift-gitops-argocd-application-controller
      containers:
      - name: bootstrap-lab
        image: quay.io/openshift/origin-cli:latest  
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Wait for the GitOps Server to be ready
          until oc get pods -n openshift-gitops | grep 'openshift-gitops-server' | grep 'Running' | grep '1/1'; do
            echo "Waiting for GitOps Server pod to be in Running state..."
            sleep 10
          done

          oc apply -f - <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: ApplicationSet
          metadata:
            name: bootstrap-lab
            namespace: openshift-gitops
          spec:
            goTemplate: true
            goTemplateOptions: ["missingkey=error"]
            generators:
            - git:
                repoURL: https://github.com/luisarizmendi/workshop-object-detection-rhde.git
                revision: main
                directories:
                - path: deployment/openshift/bootstrap-lab/manifests/*
                - path: deployment/openshift/bootstrap-lab/manifests/openshift-ai-base
                  exclude: true
                - path: deployment/openshift/bootstrap-lab/manifests/pipelines
                  exclude: true
                - path: deployment/openshift/bootstrap-lab/manifests/gitea
                  exclude: true
                - path: deployment/openshift/bootstrap-lab/manifests/nvidia-operator
                  exclude: true
                - path: deployment/openshift/bootstrap-lab/manifests/nfd
                  exclude: true
            template:
              metadata:
                name: '{{.path.basename}}'
              spec:
                project: default
                source:
                  repoURL: https://github.com/luisarizmendi/workshop-object-detection-rhde.git
                  targetRevision: main
                  path: '{{.path.path}}'
                destination:
                  server: https://kubernetes.default.svc
                syncPolicy:
                  automated:
                    prune: true
                    selfHeal: true
          EOF
          # Wait for the DataScienceCluster to be ready
          until oc get pods -n redhat-ods-applications | grep 'odh-model-controller' | grep 'Running' | grep '1/1'; do
            echo "Waiting for DataScienceCluster pod to be in Running state..."
            sleep 10
          done

          oc apply -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: bootstrap-lab-path
            namespace: openshift-gitops
          spec:
            template:
              spec:
                serviceAccountName: openshift-gitops-argocd-application-controller
                containers:
                - name: bootstrap-lab
                  image: quay.io/openshift/origin-cli:latest  
                  command: ["/bin/sh", "-c"]
                  args:
                  - |
                    #
                    oc patch datasciencecluster default-dsc --type='json' -p='[
                      {
                        "op": "replace",
                        "path": "/spec/components/dashboard/managementState",
                        "value": "Managed"
                      }
                    ]'
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop:
                        - "ALL"
                    runAsNonRoot: true
                    seccompProfile:
                      type: RuntimeDefault
                restartPolicy: Never
            backoffLimit: 1
          EOF
          # Wait for the DataScienceCluster to be ready
          until oc get pods -n redhat-ods-applications | grep 'odh-model-controller' | grep 'Running' | grep '1/1'; do
            echo "Waiting for DataScienceCluster pod to be in Running state..."
            sleep 10
          done

          oc apply -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: bootstrap-lab-ds-path
            namespace: openshift-gitops
          spec:
            template:
              spec:
                serviceAccountName: openshift-gitops-argocd-application-controller
                containers:
                - name: bootstrap-lab
                  image: quay.io/openshift/origin-cli:latest  
                  command: ["/bin/sh", "-c"]
                  args:
                  - |
                    #
                    oc patch datasciencecluster default-dsc --type='json' -p='[
                      {
                        "op": "replace",
                        "path": "/spec/components/modelregistry/managementState",
                        "value": "Removed"
                      }
                    ]'
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop:
                        - "ALL"
                    runAsNonRoot: true
                    seccompProfile:
                      type: RuntimeDefault
                restartPolicy: Never
            backoffLimit: 1
          EOF

          oc apply -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: bootstrap-lab-nfd-path
            namespace: openshift-gitops
          spec:
            template:
              spec:
                serviceAccountName: openshift-gitops-argocd-application-controller
                containers:
                - name: bootstrap-lab
                  image: quay.io/openshift/origin-cli:latest  
                  command: ["/bin/sh", "-c"]
                  args:
                  - |
                    #
                    oc delete nodefeaturediscovery -n openshift-nfd nfd-instance
                    sleep 15

                    oc create -f - <<EOF
                    kind: NodeFeatureDiscovery
                    apiVersion: nfd.openshift.io/v1
                    metadata:
                      name: nfd-instance
                      namespace: openshift-nfd
                    spec:
                      customConfig:
                        configData: |
                          #    - name: "more.kernel.features"
                          #      matchOn:
                          #      - loadedKMod: ["example_kmod3"]
                          #    - name: "more.features.by.nodename"
                          #      value: customValue
                          #      matchOn:
                          #      - nodename: ["special-.*-node-.*"]
                      operand:
                        image: 'registry.redhat.io/openshift4/ose-node-feature-discovery-rhel9@sha256:cc3d1ecddad7c6374df96acb3f46b3f2ea312b0c730b79c16658a79628b2a8c8'
                        imagePullPolicy: IfNotPresent
                        servicePort: 12000
                      workerConfig:
                        configData: |
                          core:
                          #  labelWhiteList:
                          #  noPublish: false
                            sleepInterval: 60s
                          #  sources: [all]
                          #  klog:
                          #    addDirHeader: false
                          #    alsologtostderr: false
                          #    logBacktraceAt:
                          #    logtostderr: true
                          #    skipHeaders: false
                          #    stderrthreshold: 2
                          #    v: 0
                          #    vmodule:
                          ##   NOTE: the following options are not dynamically run-time 
                          ##          configurable and require a nfd-worker restart to take effect
                          ##          after being changed
                          #    logDir:
                          #    logFile:
                          #    logFileMaxSize: 1800
                          #    skipLogHeaders: false
                          sources:
                          #  cpu:
                          #    cpuid:
                          ##     NOTE: whitelist has priority over blacklist
                          #      attributeBlacklist:
                          #        - "BMI1"
                          #        - "BMI2"
                          #        - "CLMUL"
                          #        - "CMOV"
                          #        - "CX16"
                          #        - "ERMS"
                          #        - "F16C"
                          #        - "HTT"
                          #        - "LZCNT"
                          #        - "MMX"
                          #        - "MMXEXT"
                          #        - "NX"
                          #        - "POPCNT"
                          #        - "RDRAND"
                          #        - "RDSEED"
                          #        - "RDTSCP"
                          #        - "SGX"
                          #        - "SSE"
                          #        - "SSE2"
                          #        - "SSE3"
                          #        - "SSE4.1"
                          #        - "SSE4.2"
                          #        - "SSSE3"
                          #      attributeWhitelist:
                          #  kernel:
                          #    kconfigFile: "/path/to/kconfig"
                          #    configOpts:
                          #      - "NO_HZ"
                          #      - "X86"
                          #      - "DMI"
                            pci:
                              deviceClassWhitelist:
                                - "0200"
                                - "03"
                                - "12"
                              deviceLabelFields:
                          #      - "class"
                                - "vendor"
                          #      - "device"
                          #      - "subsystem_vendor"
                          #      - "subsystem_device"
                          #  usb:
                          #    deviceClassWhitelist:
                          #      - "0e"
                          #      - "ef"
                          #      - "fe"
                          #      - "ff"
                          #    deviceLabelFields:
                          #      - "class"
                          #      - "vendor"
                          #      - "device"
                          #  custom:
                          #    - name: "my.kernel.feature"
                          #      matchOn:
                          #        - loadedKMod: ["example_kmod1", "example_kmod2"]
                          #    - name: "my.pci.feature"
                          #      matchOn:
                          #        - pciId:
                          #            class: ["0200"]
                          #            vendor: ["15b3"]
                          #            device: ["1014", "1017"]
                          #        - pciId :
                          #            vendor: ["8086"]
                          #            device: ["1000", "1100"]
                          #    - name: "my.usb.feature"
                          #      matchOn:
                          #        - usbId:
                          #          class: ["ff"]
                          #          vendor: ["03e7"]
                          #          device: ["2485"]
                          #        - usbId:
                          #          class: ["fe"]
                          #          vendor: ["1a6e"]
                          #          device: ["089a"]
                          #    - name: "my.combined.feature"
                          #      matchOn:
                          #        - pciId:
                          #            vendor: ["15b3"]
                          #            device: ["1014", "1017"]
                          #          loadedKMod : ["vendor_kmod1", "vendor_kmod2"]
                    EOF
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop:
                        - "ALL"
                    runAsNonRoot: true
                    seccompProfile:
                      type: RuntimeDefault
                restartPolicy: Never
            backoffLimit: 1
          EOF
          echo "Environment ready!"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
      restartPolicy: Never
  backoffLimit: 1
